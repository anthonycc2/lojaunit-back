package br.unit.lojaUnit.controlador;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import br.unit.lojaUnit.entidade.Cliente;
import br.unit.lojaUnit.repositorio.RepositorioCliente;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/cliente") // This means URL's start with /cliente (after Application path)
public class ControladorCliente {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private RepositorioCliente repositorio;

	@PostMapping(path = "/add") // Map ONLY POST Requests
	public @ResponseBody String inserir(@RequestBody Cliente cliente) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		repositorio.save(cliente);
		return "Saved";
	}
	
	/*@PostMapping(path = "/add") // Map ONLY POST Requests
	public @ResponseBody String inserir(
			@RequestParam(required = false, name = "cpf") String cpf,
			@RequestParam(required = true, name = "nome") String nome,
			@RequestParam(required = false, name = "email") String email,
			@RequestParam(required = false, name = "dataNascimento") Date dataNascimento,
			@RequestParam(required = false, name = "sexo") String sexo,
			@RequestParam(required = false, name = "nomeSocial") String nomeSocial,
			@RequestParam(required = false, name = "apelido") String apelido,
			@RequestParam(required = false, name = "telefone") String telefone) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Cliente cliente = new Cliente();
		cliente.setCpf(cpf);
		cliente.setNome(nome);
		cliente.setEmail(email);
		cliente.setDataNascimento(dataNascimento);
		cliente.setSexo(sexo);
		cliente.setNomeSocial(nomeSocial);
		cliente.setApelido(apelido);
		cliente.setTelefone(telefone);
		repositorio.save(cliente);
		return "Saved";
	}*/

	@GetMapping(path = "/all")
	public @ResponseBody Iterable<Cliente> listar() {
		// This returns a JSON or XML with the users
		return repositorio.findAll();
	}
	
	@GetMapping(path = "/get/{id}")
	public @ResponseBody Optional<Cliente> recuperar(@PathVariable(required = true, name="id") int id) {
			return repositorio.findById(id);
	}
	
	@PutMapping(path = "/update/{id}")
	public @ResponseBody String alterar(@PathVariable(required = true, name = "id") int id, @RequestBody Cliente cliente) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		if (repositorio.existsById(id)) {
			repositorio.save(cliente);
			return "Saved";
		} else {
			return "Id doesn't exist";
		}
	}
	
	/*@PutMapping(path = "/update/{id}")
	public @ResponseBody String alterar(
			@PathVariable(required = true, name = "id")  int id,
			@RequestParam(required = true, name = "cpf") String cpf,
			@RequestParam(required = true, name = "nome") String nome,
			@RequestParam(required = true, name = "email") String email,
			@RequestParam(required = false, name = "dataNascimento") Date dataNascimento,
			@RequestParam(required = false, name = "sexo") String sexo,
			@RequestParam(required = false, name = "nomeSocial") String nomeSocial,
			@RequestParam(required = false, name = "apelido") String apelido,
			@RequestParam(required = false, name = "telefone") String telefone) {
		if (repositorio.existsById(id)) {
			Cliente cliente = new Cliente();
			cliente.setId(id);
			cliente.setCpf(cpf);
			cliente.setNome(nome);
			cliente.setEmail(email);
			cliente.setDataNascimento(dataNascimento);
			cliente.setSexo(sexo);
			cliente.setNomeSocial(nomeSocial);
			cliente.setApelido(apelido);
			cliente.setTelefone(telefone);
			repositorio.save(cliente);
			return "Saved";
		} else {
			return "Id doesn't exist";
		}
	}*/

	@DeleteMapping(path = "/delete/{id}")
	public @ResponseBody String deletar(@PathVariable(required = true, name = "id")  int id) {
		if (repositorio.existsById(id)) {
			repositorio.deleteById(id);
			return "Removed";
		} else {
			return "Id doesn't exist";
		}
	}
	
}